/**
 * Game Loader Utilities
 * 
 * Handles loading game data from JSON files in the assets directory
 */

// Import the games index (will be generated by scripts/generate_game_index.js)
import gamesIndex from '../assets/json/games-index.json';

export interface GameData {
  gameId: string
  date: string
  fun_score: number
  story: {
    matchup: string
    final_score: string
    teams: {
      winner: {
        name: string
        city: string
        tricode: string
        teamId: number
        points: number
      }
      loser: {
        name: string
        city: string
        tricode: string
        teamId: number
        points: number
      }
    }
    advantages: Array<{
      stat_name: string
      team: string
      teamId: number
      teamTricode: string
      value1: number
      value2: number
      diff: number
    }>
  }
  lead_changes: {
    total: number
    last_5_minutes: number
    last_minute: number
    buzzer_beater: number
  }
  dunk_stats: {
    'Total Dunks': number
    'Alley Oop': number
    'Putback': number
    [key: string]: number
  }
  deep_shots: {
    deep_threes: number
    four_pointers: number
  }
  video_url?: string
  thumbnail_url?: string
  views?: number
  likes?: number
  script?: {
    video_script?: Array<{
      mp4?: string
      [key: string]: any
    }>
    [key: string]: any
  }
}

export interface FullGameData extends GameData {
  team_stats?: {
    'Margin of Victory': number
    'Combined Threes': number
    'Team Threes': Record<string, number>
    'Combined Three %': number
    'Team Three %': Record<string, number>
    'Pace': number
    'Team Pace': Record<string, number>
    'Combined Contested Shots': number
    'Team Contested Shots': Record<string, number>
    'Combined Fast Break Points': number
    'Team Fast Break Points': Record<string, number>
  }
  scoring_milestones?: {
    '70 Ball': Array<[string, number]>
    '60 Ball': Array<[string, number]>
    '50 Ball': Array<[string, number]>
    '40 Ball': Array<[string, number]>
    'Triple Double': Array<[string, string]>
  }
  gameMetadata?: {
    date: string
    arena: string
    season: string
    status?: string
    homeTeam?: any
    awayTeam?: any
  }
  script?: {
    video_script: Array<any>
    total_plays: number
  }
}

/**
 * Get all games for the feed (from lightweight index)
 * This is fast because it only loads the index file, not all 500 game files
 */
export async function getAllGames(): Promise<GameData[]> {
  try {
    // Cast the imported JSON to the correct type
    return gamesIndex as GameData[];
  } catch (error) {
    console.error('Error loading games index:', error);
    return [];
  }
}

/**
 * Get a single game's full data by ID
 * This loads the complete JSON file for a specific game
 */
export async function getGameById(gameId: string): Promise<FullGameData | null> {
  try {
    // Dynamically import the specific game file
    const gameModule = await import(`../assets/json/${gameId}.json`);
    const gameData = gameModule.default;
    
    // Transform to match our interface if needed
    return transformGameData(gameData);
  } catch (error) {
    console.error(`Error loading game ${gameId}:`, error);
    return null;
  }
}

/**
 * Transform raw JSON to our expected format
 * Handles different possible structures from your Python scripts
 */
function transformGameData(raw: any): FullGameData {
  // Check if data is nested under a "score" or other key
  const gameId = raw.gameId;
  const scoreData = raw.score?.[gameId] || raw.score || {};
  const story = raw.story || {};
  const metadata = raw.gameMetadata || {};
  
  return {
    gameId: gameId,
    date: metadata.date || raw.date,
    fun_score: scoreData.fun_score || raw.fun_score || 0,
    
    story: {
      matchup: story.matchup || '',
      final_score: story.final_score || '',
      teams: story.teams || {
        winner: {
          name: metadata.homeTeam?.name || '',
          city: metadata.homeTeam?.city || '',
          tricode: metadata.homeTeam?.abbreviation || '',
          teamId: metadata.homeTeam?.team_id || 0,
          points: metadata.homeTeam?.points || 0
        },
        loser: {
          name: metadata.awayTeam?.name || '',
          city: metadata.awayTeam?.city || '',
          tricode: metadata.awayTeam?.abbreviation || '',
          teamId: metadata.awayTeam?.team_id || 0,
          points: metadata.awayTeam?.points || 0
        }
      },
      advantages: story.advantages || []
    },
    
    lead_changes: scoreData.lead_changes || raw.lead_changes || {
      total: 0,
      last_5_minutes: 0,
      last_minute: 0,
      buzzer_beater: 0
    },
    
    dunk_stats: scoreData.dunk_stats || raw.dunk_stats || {
      'Total Dunks': 0,
      'Alley Oop': 0,
      'Putback': 0
    },
    
    deep_shots: scoreData.deep_shots || raw.deep_shots || {
      deep_threes: 0,
      four_pointers: 0
    },
    
    team_stats: scoreData.team_stats || raw.team_stats,
    scoring_milestones: scoreData.scoring_milestones || raw.scoring_milestones,
    gameMetadata: metadata,
    script: raw.script,
    
    thumbnail_url: raw.thumbnail_url,
    video_url: raw.video_url || 
               raw.script?.video_script?.[0]?.mp4 || // Use first video from script
               null,
    views: raw.views || 0,
    likes: raw.likes || 0
  };
}

/**
 * Get games filtered by date range
 */
export async function getGamesByDateRange(
  startDate: Date,
  endDate: Date
): Promise<GameData[]> {
  const allGames = await getAllGames();
  return allGames.filter(game => {
    const gameDate = new Date(game.date);
    return gameDate >= startDate && gameDate <= endDate;
  });
}

/**
 * Get top games by fun score
 */
export async function getTopGamesByFunScore(limit: number = 10): Promise<GameData[]> {
  const allGames = await getAllGames();
  return allGames
    .sort((a, b) => b.fun_score - a.fun_score)
    .slice(0, limit);
}

/**
 * Search games by team
 */
export async function searchGamesByTeam(teamTricode: string): Promise<GameData[]> {
  const allGames = await getAllGames();
  return allGames.filter(game => 
    game.story.teams.winner.tricode === teamTricode ||
    game.story.teams.loser.tricode === teamTricode
  );
}

